def getServers (TOKEN) {
  def CLO_URL="https://api.clo.ru/v1/projects"

  REL=sh (returnStdout:true,
    script: 'curl -X GET -H \"Content-Type: application/json\" -H "Authorization: Bearer ${TOKEN}\"   '+CLO_URL)
  def jsonObj = readJSON text: REL

  def project_id= jsonObj.results[0].id
  println project_id
  CLO_URL= 'https://api.clo.ru/v1/projects/'+project_id+'/servers '
  REL=sh (returnStdout:true,
    script: 'curl -X GET -H \"Content-Type: application/json\" -H "Authorization: Bearer ${TOKEN}\"   '+CLO_URL)
  jsonObj = readJSON text: REL
  println REL
  def str=''
  def mylist=[]
  for(emp in jsonObj.results) {
    mylist.add("${emp.id}_#{emp.name}")

	      }


//-H \"Content-Type: application/json\" -H "Authorization: Bearer ${TOKEN}\" \
  // def commits = [:]
      // def CLO_URL="https://api.clo.ru/v1/projects"
      // def response = httpRequest contentType: 'APPLICATION_JSON' ,
      // customHeaders: [ [name: 'Authorization',  value:'Bearer '+TOKEN]] ,url: CLO_URL
    println mylist

    //   def endpoint = CLO_URL + "v1/projects"
    //   def conn = new URL(endpoint).openConnection()
    // //  'Bearer {{ token }}
    //   conn.setRequestProperty("", "Bearer ${AUTH}")
    //   def response = new groovy.json.JsonSlurper().parseText(conn.content.text)
    //   response.values.each {
    //     commits.put(it.displayId, it.message)

    return mylist
}
// def TOKEN     = credentials('clo')
// def SERVERS_LIST = getServers (TOKEN)
//findAMIs().join('\n')
pipeline {
    agent any

    environment {
        TOKEN     = credentials('clo')

    }





      stages() {
        stage('Test1' ) {
        steps {
          script {
            properties([
            parameters([
                                        choice(
                                            choices: getServers( TOKEN ),
                                            name: 'PARAMETER_01'
                                        ),
              ])
            ])



      }
      }
      }


        stage('Stage 1') {
            steps {
              script {

              def git_cred='2c259981-11c3-4202-bfb4-294515794d21'
              def git_url='git@github.com:RoboInterativo/workshop2.git'


              sh 'pwd && ls -li'

          }




        }

    }
  }
    post {
        success {

            archiveArtifacts allowEmptyArchive: true, artifacts: '${WORKSPACE}/simple-back-front/front/*.zip', fingerprint: true

        }
      }
}
