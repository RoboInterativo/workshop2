def getServers (TOKEN) {
  def CLO_URL="https://api.clo.ru/v1/projects"

  REL=sh (returnStdout:true,
    script: 'curl -X GET -H \"Content-Type: application/json\" -H "Authorization: Bearer ${TOKEN}\"   '+CLO_URL)
  def jsonObj = readJSON text: REL

  def project_id= jsonObj.results[0].id
  println project_id
  CLO_URL= 'https://api.clo.ru/v1/v1/projects/'+project_id+'/servers '
  REL=sh (returnStdout:true,
    script: 'curl -X GET -H \"Content-Type: application/json\" -H "Authorization: Bearer ${TOKEN}\"   '+CLO_URL)
  jsonObj = readJSON text: REL
  println REL

//-H \"Content-Type: application/json\" -H "Authorization: Bearer ${TOKEN}\" \
  // def commits = [:]
      // def CLO_URL="https://api.clo.ru/v1/projects"
      // def response = httpRequest contentType: 'APPLICATION_JSON' ,
      // customHeaders: [ [name: 'Authorization',  value:'Bearer '+TOKEN]] ,url: CLO_URL
    println REL

    //   def endpoint = CLO_URL + "v1/projects"
    //   def conn = new URL(endpoint).openConnection()
    // //  'Bearer {{ token }}
    //   conn.setRequestProperty("", "Bearer ${AUTH}")
    //   def response = new groovy.json.JsonSlurper().parseText(conn.content.text)
    //   response.values.each {
    //     commits.put(it.displayId, it.message)

    return jsonObj
}


pipeline {
    agent any
       parameters {
         choice choices: 'refresh\ncreate\ndelete', name: 'MODELNAME'
    //            string(
    //       			name: 'CODE_REPO',
    //       			defaultValue: 'https://github.com/RoboInterativo/simple-back-front.git',
    //       			description: 'CODE_REPO'
		//             )
		//  string(
		// 	name: 'BRANCH',
		// 	defaultValue: 'main',
		// 	description: 'BRANCH'
		// )


    }
    environment {
        TOKEN     = credentials('clo')

    }



    stages {
        stage('Stage 1') {
            steps {
              script {

              def git_cred='2c259981-11c3-4202-bfb4-294515794d21'
              def git_url='git@github.com:RoboInterativo/workshop2.git'

              // checkout([$class: 'GitSCM', branches: [[name: "main"]],
              // doGenerateSubmoduleConfigurations: false,
              // extensions: [[$class: 'RelativeTargetDirectory',
              // relativeTargetDir: 'ci/']], gitTool: 'Default',
              // submoduleCfg: [],
              // userRemoteConfigs: [[credentialsId: git_cred,    url: git_url]]])
              sh 'pwd && ls -li'
              def servers=getServers(TOKEN);
              println servers ;

            //   withCredentials([string(credentialsId: 'clo', variable: 'clo')]) {
            //         withCredentials([string(credentialsId: 'ssh_default_password', variable: 'ssh_default_password')]) {
            //     dir ('ansible') {
            //       sh 'echo ${clo}>tok '
            //       ansiblePlaybook extras: "-vv --extra-vars \"work_dir=${WORKSPACE} token=${clo} ssh_pass=${ssh_default_password} inventory_dir=\"inventories/dev/\"\" ",
            //       installation: 'ansible29',
            //       inventory: "inventories/dev/inventory",
            //       playbook: "playbooks/servers_clo.yml"
            //     }
            //     telegramSend 'Hello World'
            //
            //   }
            // }
          }


                           //${WORKSPACE}
                        //  checkout([$class: 'GitSCM', branches: [[name: "master"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory',
                        //  relativeTargetDir: 'ci/']], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'cred',
                        //  url: ""]]])
                         // sh "pwd && ls -li "
                         // sh "rm * -rf "
                         // sh 'wget https://nodejs.org/dist/v14.17.6/node-v14.17.6-linux-x64.tar.xz'
                         // sh 'tar xvf node-v14.17.6-linux-x64.tar.xz'
                         // sh 'echo export PATH=$PATH:/var/lib/jenkins/workspace/test/node-v14.17.6-linux-x64/bin >> env'
                         // sh '. ./env && node --version'
                         // sh 'echo ${CODE_REPO}'
                         // sh 'git clone ${CODE_REPO}'
                         //    sh "export CI=false && . ./env && node --version && cd simple-back-front && cd front && npm install -f && npm run build"
                         //    sh "cd ${WORKSPACE}/simple-back-front/front/ && zip build.zip build -r"

                         //DEPLOY_TYPE = 'BUILDONOPENSHIFT4'

                        //  ansiblePlaybook extras: "-vv --extra-vars \"inventory_dir=\"${WORKSPACE}/c/ansible/inventories/dev/\"\" ",
                        //  installation: 'ansible29',
                        //  inventory: "ci/ansible/inventories/dev/inventory",
                        //  playbook: "ci/ansible/playbooks/test.yml"
            }
        }

    }
    post {
        success {

            archiveArtifacts allowEmptyArchive: true, artifacts: '${WORKSPACE}/simple-back-front/front/*.zip', fingerprint: true

        }
      }
}
